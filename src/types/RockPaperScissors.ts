/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RockPaperScissorsInterface extends utils.Interface {
  functions: {
    "createGame(address)": FunctionFragment;
    "gameCount()": FunctionFragment;
    "gameInfos(uint256)": FunctionFragment;
    "joinGame(uint256)": FunctionFragment;
    "makeMove(uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createGame"
      | "gameCount"
      | "gameInfos"
      | "joinGame"
      | "makeMove"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createGame",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gameCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameInfos",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeMove",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeMove", data: BytesLike): Result;

  events: {
    "GameComplete(address,uint256)": EventFragment;
    "GameCreated(address,uint256,uint256)": EventFragment;
    "GameStarted(address[2],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GameComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
}

export interface GameCompleteEventObject {
  winner: string;
  gameNumber: BigNumber;
}
export type GameCompleteEvent = TypedEvent<
  [string, BigNumber],
  GameCompleteEventObject
>;

export type GameCompleteEventFilter = TypedEventFilter<GameCompleteEvent>;

export interface GameCreatedEventObject {
  creator: string;
  gameNumber: BigNumber;
  bet: BigNumber;
}
export type GameCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  GameCreatedEventObject
>;

export type GameCreatedEventFilter = TypedEventFilter<GameCreatedEvent>;

export interface GameStartedEventObject {
  players: [string, string];
  gameNumber: BigNumber;
}
export type GameStartedEvent = TypedEvent<
  [[string, string], BigNumber],
  GameStartedEventObject
>;

export type GameStartedEventFilter = TypedEventFilter<GameStartedEvent>;

export interface RockPaperScissors extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RockPaperScissorsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createGame(
      _participant: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gameCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    gameInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        creator: string;
        participant: string;
        bet: BigNumber;
        hasJoined: boolean;
      }
    >;

    joinGame(
      _gameNumber: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeMove(
      _gameNumber: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createGame(
    _participant: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gameCount(overrides?: CallOverrides): Promise<BigNumber>;

  gameInfos(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean] & {
      creator: string;
      participant: string;
      bet: BigNumber;
      hasJoined: boolean;
    }
  >;

  joinGame(
    _gameNumber: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeMove(
    _gameNumber: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createGame(
      _participant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    gameCount(overrides?: CallOverrides): Promise<BigNumber>;

    gameInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        creator: string;
        participant: string;
        bet: BigNumber;
        hasJoined: boolean;
      }
    >;

    joinGame(
      _gameNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    makeMove(
      _gameNumber: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GameComplete(address,uint256)"(
      winner?: null,
      gameNumber?: null
    ): GameCompleteEventFilter;
    GameComplete(winner?: null, gameNumber?: null): GameCompleteEventFilter;

    "GameCreated(address,uint256,uint256)"(
      creator?: null,
      gameNumber?: null,
      bet?: null
    ): GameCreatedEventFilter;
    GameCreated(
      creator?: null,
      gameNumber?: null,
      bet?: null
    ): GameCreatedEventFilter;

    "GameStarted(address[2],uint256)"(
      players?: null,
      gameNumber?: null
    ): GameStartedEventFilter;
    GameStarted(players?: null, gameNumber?: null): GameStartedEventFilter;
  };

  estimateGas: {
    createGame(
      _participant: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gameCount(overrides?: CallOverrides): Promise<BigNumber>;

    gameInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinGame(
      _gameNumber: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeMove(
      _gameNumber: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createGame(
      _participant: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gameCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinGame(
      _gameNumber: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeMove(
      _gameNumber: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
